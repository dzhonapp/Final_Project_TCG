::rnorm
:rnorm:
?rnomr
?rnorm
rnorm(10)
rnomr( mean = 100, sd = 25)
rnomr(10, mean(100), sd =25)
rnorm(10, mean(100), sd =25)
rnomr(10, mean =100, sd =25)
rnorm (10, mean =100, sd =25)
?rpois
rpois(5, mean =10)
rpois(5, 10)
rep(100, rpois(5,10))
replicate(100, rpois(5,10))
my_pois<-replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x, y)
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(x = cars$speed, y = cars$dist,  main = "My Plot")
plot(cars,  main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
library(mtcars)
mtcars
data(mtcars)
boxplot()
boxplot(cars)
boxplot(mtcars)
?boxplot
boxplot(mpg~cyl, data = mtcars)
hist(mtcars$mpg)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
siwrl()
swirl()
us
swirl()
---
title: "assign7"
author: "Berdimyrat Mammedov"
date: '17 March 2019 Ð³ '
output: html_document
---
## Here we get website
```{r}
library(xml2)
library(rvest)
library(magrittr)
library(stringr)
library(dplyr)
website <- read_html("https://en.wikipedia.org/wiki/List_of_best-selling_books#Between_50_million_and_100_million_copies")
results <- website %>% html_table()
df <-results[2]
df <- df[[1]]
```
## Cleaning the data, changin the header happened here
```{r}
headerNames <- c("Book", "Author(s)", "Language", "First Published (year)", "Approximate Sales", "Genre")
headerNames
colnames(df) <- headerNames
str(df)
```
## Adding new column here and filling it with required data
```{r}
#Make a new column filled with 0's
df[,"Ages"] <- rep(0, nrow(df))
#Reorder column so it will be close to year
#Reordering
df <- df[,c(1, 2, 3, 4, 7, 5, 6)]
for (row in 1:nrow(df)) {
df[row, 5] <- as.numeric((2019 - df[row, 4]))
}
```
```{r}
df[, c(4,5)]
```
##Assignment 7 Graphic using GGPLOT2
### We can see on this graph the correlation of bestseller books by year and language and genre!
```{r}
library(ggplot2)
qplot(`First Published (year)`, Genre, data = df, color = Language)
```
firstFile <- read.csv("https://www.kaggle.com/mohansacharya/graduate-admissions#Admission_Predict_Ver1.1.csv")
firstFile <- read.csv("https://www.kaggle.com/mohansacharya/graduate-admissions#Admission_Predict_Ver1.1.csv")
secondFile <- read.csv("https://www.kaggle.com/mohansacharya/graduate-admissions#Admission_Predict.csv")
getwd()
unzip("graduate-admission.zip")
unzip("graduate-admission.zip", exdir = "grad_admission")
list.files("grad_admission")
firstFile <- read.csv("grad_admission/Admission_Predict.csv")
list.files("grad_admission")
secondFile <- read.csv("grad_admission/Admission_Predict_Ver1.1.csv")
# Bind data together
# We need dplyr library
library(dplyr)
# Bind data together
# We need dplyr library
library(dplyr)
data <- bind_rows (firstFile, secondFile)
summary(data)
install.packages("VIM")
library(VIM)
aggr(data)
head(data, n = 5)
set.seed(10)
clusters <- kmeans (data[, 10:20], 5)
clusters <- kmeans (data, 5)
str(clusters)
dim(data)
clusters <- kmeans (data[, 1:100], 5)
clusters <- kmeans (data[1:9, 1:100], 5)
clusters <- kmeans (data[1:9, ], 5)
str(clusters)
clusters <- kmeans (data, 5)
str(clusters)
names(clusters)
clusters$cluster
plot(x,y, col=clusters$cluster, pch = 19, cex = 2)
clusters <- kmeans (data[1:9,], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(x, y, col=clusters$cluster, pch = 19, cex = 2)
plot(x, y, col=clusters$cluster)
data <- data.fram(x,y)
clusters <- kmeans (data, 5)
data <- data.frame(x,y)
data <- data.frame(x,y)
myData <- bind_rows (firstFile, secondFile)
summary(myData)
aggr(myData)
head(myData, n = 5)
set.seed(10)
set.seed(10)
clusters <- kmeans(myData, 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData, col=clusters$cluster)
clusters <- kmeans(myData[, 1:9], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData, col=clusters$cluster)
clusters <- kmeans(myData[1:10, 1:9], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData, col=clusters$cluster)
clusters <- kmeans(myData[1:10, 1:9], 2)
clusters$cluster
plot(myData, col=clusters$cluster)
plot(myData$GRE.Score, myData$University.Rating, col=clusters$cluster)
clusters <- kmeans(myData, 3)
clusters$cluster
plot(myData$GRE.Score, myData$University.Rating, col=clusters$cluster)
clusters <- kmeans(myData, 5)
,
plot(myData$GRE.Score, myData$University.Rating, col=clusters$cluster)
names(clusters)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster)
clusters <- kmeans(myData[1:100, ], 5)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster)
clusters <- kmeans(myData[1:50, ], 5)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster)
# We don't have any missing values as you can see below!
myData <- myData [1:100,]
myData
head(myData, n = 5)
set.seed(10)
clusters <- kmeans(myData[1:50, ], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
points(clusters$centers, col = 1:3, pch = 3, cex = 2, lwd = 3)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 3, cex = 2, lwd = 3)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 3, cex = 2, lwd = 3)
points(clusters$centers, col = 1:5, pch = 3, cex = 2, lwd = 3)
points(clusters$centers, col = 1:9, pch = 3, cex = 2, lwd = 3)
points(clusters$centers, col = 1:3, pch = 3, cex = 2, lwd = 3)
clusters$centers
points(clusters$centers, col = 1:9, pch = 3, cex = 3; lwd = 3)
points(clusters$centers, col = 1:9, pch = 3, cex = 3, lwd = 3)
plot(myData$GRE.Score, myData$Chance.of.Admit, centers = 3,  col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:9, pch = 3, cex = 3, lwd = 3)
plot(myData$GRE.Score, myData$Chance.of.Admit, centers = 3,  col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:9, pch = 3, cex = 3, lwd = 3)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(10)
clusters <- kmeans(myData[1:50, ], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
head(myData, n = 5)
```
head(myData, n = 5)
## Now Let's begin using K-Means Clusterin!
set.seed(10)
clusters <- kmeans(myData[1:50, ], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
head(myData, n = 5)
## Now Let's begin using K-Means Clusterin!
set.seed(10)
clusters <- kmeans(myData[1:50, ], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 13, cex = 3, lwd = 3)
head(myData, n = 5)
## Now Let's begin using K-Means Clusterin!
set.seed(10)
clusters <- kmeans(myData[1:50, ], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 13, cex = 13, lwd = 3)
head(myData, n = 5)
## Now Let's begin using K-Means Clusterin!
set.seed(10)
clusters <- kmeans(myData[1:50, ], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:3, pch = 13, cex = 13, lwd = 13)
head(myData, n = 5)
## Now Let's begin using K-Means Clusterin!
set.seed(10)
clusters <- kmeans(myData[1:50, ], 5)
str(clusters)
names(clusters)
clusters$cluster
plot(myData$GRE.Score, myData$Chance.of.Admit, col=clusters$cluster, pch =19, cex = 2)
points(clusters$centers, col = 1:9, pch = 13, cex = 13, lwd = 13)
library(VIM)
aggr(myData)
install.packages("VIM")
install.packages("VIM")
library(VIM)
install.packages("VIM")
data(file)
getwd()
setwd("C:/Users/berdi/OneDrive/Documents/datasciencecoursera")
install.packages("readxl")
library("readxl")
file <- read_excel("OilPrices1.xls")
str(file)
data(file)
y <-file$Per_Gallon_Price;
x <- file$observation_date;
n <- length(y)
naa<-length(x)
n
naa
fit <- lm(y ~ x)
e <-resid(fit)
yhat <- predict(fit)
plot(x, e, xlab = "Date", ylab = "Oil Prices($)"
, bg = "lightblue",
col = "black", cex =2, pch =21, frame = FALSE)
abline(h =0, lwd =2)
for (i in 1: n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red", lwd = 1)
read.csv("https://github.com/fivethirtyeight/data/edit/master/births/US_births_2000-2014_SSA.csv")
download.file("https://github.com/fivethirtyeight/data/edit/master/births/US_births_2000-2014_SSA.csv")
getwd()
download.file("https://github.com/fivethirtyeight/data/edit/master/births/US_births_2000-2014_SSA.csv", "us_births_2000-2014.csv")
read.csv("us_births_2000-2014.csv")
readClipboard();
read.csv("US_births_2000-2014_SSA", delimeter = ",")
read.csv("US_births_2000-2014_SSA", sep = ",")
read.csv("US_births_2000-2014_SSA", sep = ",")
read.csv("US_births_2000-2014_SSA", sep = ",", "rt")
read.csv("US_births_2000-2014_SSA")
getwd()
read.csv("US_births_2000-2014_SSA.csv")
birthInUSA <- read.csv("US_births_2000-2014_SSA.csv")
birthInUSA
library(swirl)
swirl()
summary(birthInUSA)
aggregate(birthInUSA[, 2,3], list(birthInUSA$year), mean)
aggregate(d[, 2], list(d$Name), mean)
aggregate(birthInUSA[, 2], list(birthInUSA$year), mean)
str(birthInUSA)
apply(birthInUSA, 1, max)
apply(birthInUSA,  max)
tapply(birthInUSA, 5, max)
apply(birthInUSA, 5, max)
apply(birthInUSA, 2, max)
apply(birthInUSA, 3, max)
apply(birthInUSA, 2, max)
aggregate(birthInUSA$births, by = birthInUSA$year, sum)
dFrame <- frame=data.frame(birthInUsa)
dFrame <- frame=data.frame(birthInUSA)
dFrame <- data.frame(birthInUSA)
aggregate(dFrame$births, by = dFrame$year, sum)
aggregate(dFrame['births'], by = dFrame['year'], sum)
aggregate(dFrame['births'], by = dFrame['day_of_week'], sum)
sumbyWeekDay <- aggregate(dFrame['births'], by = dFrame['month'], sum)
sumbyWeekDay <- aggregate(dFrame['births'], by = dFrame['day_of_week'], sum)
sumbyWeekMonth <- aggregate(dFrame['births'], by = dFrame['month'], sum)
sumbyWeekMonth
lmodel1  <- lm(birthInUSA$month ~ birthInUSA, data = birthInUSA)
lmodel1  <- lm(birthInUSA$birth ~ birthInUSA$month, data = birthInUSA)
lmodel1
lm(dFrame['births'] ~ dFrame['year'], data = birthInUSA)
lm(dFrame['births'] ~ dFrame['year'], data = dFrame)
lm(birthInUSA$birth ~ birthInUSA$year, data = birthInUSA)
hist(sumbbyYear$birth.Value)
hist(sumbbyYear$birth)
library(ggplot2)
hist(sumbbyYear$birth)
sumbyYear <- aggregate(dFrame['births'], by = dFrame['year'], sum)
sumbyYear
lmodel1  <- lm(birthInUSA$births ~ birthInUSA$month, data = birthInUSA)
lm(birthInUSA$births ~ birthInUSA$year, data = birthInUSA)
hist(sumbbyYear$births)
hist(sumbyYear$births)
hist(sumbyYear$year)
hist(sumbyYear$births)
##Heteroskesdasticity example (Date of Month)
library(ggplot2)
mydata <- read.csv("US_births_2000-2014_SSA.csv")
y <-mydata$births ; x<-  mydata$date_of_month; n<- length(y)
fit<- lm(y~x)
e<- resid(fit)
yhat <- predict(fit)
max(abs(e-(y-yhat)))
max(abs(e-(y-coef(fit)[1]-coef(fit)[2]*x)))
x = runif(100, 0, 6)
y = x + rnorm(100, mean=0, sd = .002*x)
library(ggplot2)
g= ggplot(data.frame(x = x, y = resid(lm (y~x))), aes(x=x,y=y))
g = g+ geom_hline(yintercept = 0, size =2)
g = g+ geom_point(size = 7, colour ="black", alpha =0.4)
g = g+ geom_point(size = 5, colour ="red", alpha =0.4)
g= g+ xlab("Date of Month") + ylab("Birth")
g= ggplot(data.frame(x = x, y = resid(lm (y~x))), aes(x=x,y=y))
summary(birthInUSA)
dFrame <- data.frame(birthInUSA)
library(ggplot2)
## Getting birth by Year
sumbyYear <- aggregate(dFrame['births'], by = dFrame['year'], sum)
sumbyYear
sumbyWeekDay <- aggregate(dFrame['births'], by = dFrame['day_of_week'], sum)
sumbyWeekMonth <- aggregate(dFrame['births'], by = dFrame['month'], sum)
hist(sumbyYear$births)
##LInear Model relation between birth and month
lmodel1  <- lm(birthInUSA$births ~ birthInUSA$month, data = birthInUSA)
#linear model relation between birth and year
lm(birthInUSA$births ~ birthInUSA$year, data = birthInUSA)
#linear model relation between birth and year
lm(birthInUSA$births ~ birthInUSA$year, data = birthInUSA)
y
y <-mydata$births ;
x<-  mydata$month;
n<- length(y)
fit<- lm(y~x)
e<- resid(fit)
yhat <- predict(fit)
max(abs(e-(y-yhat)))
max(abs(e-(y-coef(fit)[1]-coef(fit)[2]*x)))
x = runif(100, -3,3)
y = x + sin(x) + rnorm(100, sd = .2)
library(ggplot2)
g = ggplot(data.frame(x = x, y = resid(lm (y~x))), aes(x=x,y=y))
g = g+ geom_hline(yintercept = 0, size =2)
g = g+ geom_point(size = 7, colour ="black", alpha =0.4)
g = g+ geom_point(size = 5, colour ="red", alpha =0.4)
g= g+ xlab("Month") + ylab("Birth")
g
y <-mydata$births ; x<-  mydata$day_of_week; n<- length(y)
fit<- lm(y~x)
e<- resid(fit)
yhat <- predict(fit)
max(abs(e-(y-yhat)))
max(abs(e-(y-coef(fit)[1]-coef(fit)[2]*x)))
x = runif(100, -3,3)
y = x + sin(x) + rnorm(100, sd = .2)
library(ggplot2)
g= ggplot(data.frame(x = x, y = resid(lm (y~x))), aes(x=x,y=y))
g = g+ geom_hline(yintercept = 0, size =2)
g = g+ geom_point(size = 7, colour ="black", alpha =0.4)
g = g+ geom_point(size = 5, colour ="red", alpha =0.4)
g= g+ xlab("Day of Week") + ylab("Birth")
g
library(ggplot2)
mydata <- read.csv("US_births_2000-2014_SSA.csv")
y <-mydata$births ; x<-  mydata$date_of_month; n<- length(y)
fit<- lm(y~x)
e<- resid(fit)
yhat <- predict(fit)
max(abs(e-(y-yhat)))
max(abs(e-(y-coef(fit)[1]-coef(fit)[2]*x)))
x = runif(100, 0, 6)
y = x + rnorm(100, mean=0, sd = .002*x)
library(ggplot2)
g= ggplot(data.frame(x = x, y = resid(lm (y~x))), aes(x=x,y=y))
g
g = g+ geom_hline(yintercept = 0, size =2)
g = g+ geom_point(size = 7, colour ="black", alpha =0.4)
g = g+ geom_point(size = 5, colour ="red", alpha =0.4)
g= g+ xlab("Date of Month") + ylab("Birth")
g
lmodel1
sumbyWeekDay
sumbyYear
sumbyWeekMonth
birthInUSA <- read.csv("US_births_2000-2014_SSA.csv")
birthInUSA
sumbyWeekDay <- aggregate(dFrame['births'], by = dFrame['day_of_week'], sum)
sumbyMonth <- aggregate(dFrame['births'], by = dFrame['month'], sum)
View(birthInUSA)
mydata <- birthInUSA
install.packages("shiny")
install.packages("plotly")
library(ploty)
library('plotly')
plot_ly(mydata, x = mydata$year, y = mydata$births, mode = 'markers');
plot_ly(sumbyMonth, x = sumbyMonth$births, y = sumbyMonth$month, mode = 'markers');
plot_ly(sumbyMonth, x = sumbyMonth$births, y = sumbyMonth$month, mode = 'markers');
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers');
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers', color = disp);
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers', color = as.factor(sumbyYear$year));
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers');
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers', as.factor(month.name));
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers', as.factor(sumbyMonth$month));
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers', color = disp);
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x = month, y =  births, mode = 'markers', color = disp);
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x = month, y =  births, mode = 'markers');
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers', color = disp)
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers', size = hp)
layout(autosize = F, width = 500, height = 500, margin = m)
sumbyMonth
## In This graph we can see the birth quantity by month in given years!
plot_ly(sumbyMonth, x =sumbyMonth$month, y =  sumbyMonth$births, mode = 'markers')
plot_ly(x = sumbyYear$year, y = sumbyYear$births);
plot_ly(x = time(sumbyYear$year), y = sumbyYear$births);
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = hp);
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = 30);
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = 15);
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = 15, type = "bar");
plot_ly(mydata, type=histogram)
plot_ly(x =mydata, type=histogram)
plot_ly(x =mydata$year, type=histogram)
plot_ly(x =mydata$day_of_week)
plot_ly(x =sumbyWeekDay)
sumbyWeekDay
plot_ly(x =sumbyWeekDay, type= histogram)
plot_ly(x =sumbyWeekDay$day_of_week, type= histogram)
plot_ly(x =sumbyWeekDay$births, type= histogram)
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = 10, type = box)
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = 10)
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = 10, color = sumbyYear$year)
plot_ly(x = mydata$day_of_week, y = mydata$births, color = mydata$year)
plot_ly(x = sumbyYear$year, y = sumbyYear$births, size = 10, color = sumbyYear$year)
runApp()
library(shiny)
runApp()
getwd()
setwd"C:/Users/berdi/OneDrive/Documents/Final_Project_TCG")
setwd("C:/Users/berdi/OneDrive/Documents/Final_Project_TCG")
runApp()
